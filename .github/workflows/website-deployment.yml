name: Construir y enviar imagen a AWS ECR

on:
  push:
    branches: [ "dev_branch" ]  # Se activa al hacer push a "dev_branch"

env:
  IMAGE_TAG: latest  # Etiqueta de la imagen

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Se ejecuta en un entorno Ubuntu

    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get secrets from BitWarden #Obtener las claves de BitWarden
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          secrets: |
            c1e4230f-1bbc-472f-807a-b29001372dca > AWS_ACCESS_KEY_ID
            8ea1690a-f77b-4c39-b25d-b290013760b3 > AWS_SECRET_ACCESS_KEY
            1368ee86-345d-442d-bb9c-b290015605f5 > AWS_REGION
            1c846775-48c6-400b-b767-b29001564a82 > ECR_REPOSITORY

      # Paso 2: Configurar credenciales de AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Paso 3: Iniciar sesión en AWS ECR
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Paso 4: Construir la imagen de Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      # Paso 5: Etiquetar la imagen para ECR
      - name: Tag Docker image
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # Paso 6: Subir la imagen a AWS ECR
      - name: Push Docker image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}